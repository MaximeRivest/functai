
```{python}
from pydantic import BaseModel, Field
from typing import List


class Node(BaseModel, frozen=True):
    id: int
    label: str
    color: str


class Edge(BaseModel, frozen=True):
    source: int
    target: int
    label: str
    color: str = "black"


class KnowledgeGraph(BaseModel):
    nodes: List[Node] = Field(..., default_factory=list)
    edges: List[Edge] = Field(..., default_factory=list)
```



```{python}
from openai import OpenAI
import instructor


# Adds response_model to ChatCompletion
# Allows the return of Pydantic model rather than raw JSON
client = instructor.from_openai(OpenAI())


def generate_graph(input) -> KnowledgeGraph:
    return client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "user",
                "content": f"Help me understand the following by describing it as a detailed knowledge graph: {input}",
            }
        ],
        response_model=KnowledgeGraph,
    )  # type: ignore
```



```{python}
from graphviz import Digraph



def visualize_knowledge_graph(kg: KnowledgeGraph):
    dot = Digraph(comment="Knowledge Graph")

    # Add nodes
    for node in kg.nodes:
        dot.node(str(node.id), node.label, color=node.color)

    # Add edges
    for edge in kg.edges:
        dot.edge(str(edge.source), str(edge.target), label=edge.label, color=edge.color)

    # Render the graph
    dot.render("knowledge_graph.gv", view=True)


graph = generate_graph("Teach me about quantum mechanics")
visualize_knowledge_graph(graph)
```



```{python}
text_chunks = [
    "Jason knows a lot about quantum mechanics. He is a physicist. He is a professor",
    "Professors are smart.",
    "Sarah knows Jason and is a student of his.",
    "Sarah is a student at the University of Toronto. and UofT is in Canada",
]
```




```{python}
from pydantic import BaseModel, Field
from typing import List, Optional


class Node(BaseModel, frozen=True):
    id: int
    label: str
    color: str


class Edge(BaseModel, frozen=True):
    source: int
    target: int
    label: str
    color: str = "black"


class KnowledgeGraph(BaseModel):
    nodes: Optional[List[Node]] = Field(..., default_factory=list)
    edges: Optional[List[Edge]] = Field(..., default_factory=list)

    def update(self, other: "KnowledgeGraph") -> "KnowledgeGraph":
        """Updates the current graph with the other graph, deduplicating nodes and edges."""
        return KnowledgeGraph(
            nodes=list(set(self.nodes + other.nodes)),
            edges=list(set(self.edges + other.edges)),
        )

    def draw(self, prefix: str = None):
        dot = Digraph(comment="Knowledge Graph")

        for node in self.nodes:  
            dot.node(str(node.id), node.label, color=node.color)

        for edge in self.edges:  
            dot.edge(
                str(edge.source), str(edge.target), label=edge.label, color=edge.color
            )
        dot.render(prefix, format="png", view=True)
```



```{python}



from typing import List



def generate_graph(input: List[str]) -> KnowledgeGraph:
    cur_state = KnowledgeGraph()  
    num_iterations = len(input)
    for i, inp in enumerate(input):
        new_updates = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {
                    "role": "system",
                    "content": """You are an iterative knowledge graph builder.
                    You are given the current state of the graph, and you must append the nodes and edges
                    to it Do not procide any duplcates and try to reuse nodes as much as possible.""",
                },
                {
                    "role": "user",
                    "content": f"""Extract any new nodes and edges from the following:
                    # Part {i}/{num_iterations} of the input:

                    {inp}""",
                },
                {
                    "role": "user",
                    "content": f"""Here is the current state of the graph:
                    {cur_state.model_dump_json(indent=2)}""",
                },  
            ],
            response_model=KnowledgeGraph,
        )  # type: ignore

        # Update the current state
        cur_state = cur_state.update(new_updates)  
        cur_state.draw(prefix=f"iteration_{i}")
    return cur_state








    
```



```{python}
text_chunks = [
    "Jason knows a lot about quantum mechanics. He is a physicist. He is a professor",
    "Professors are smart.",
    "Sarah knows Jason and is a student of his.",
    "Sarah is a student at the University of Toronto. and UofT is in Canada",
]
graph: KnowledgeGraph = generate_graph(text_chunks)
graph.draw(prefix="final")
```





```{python}
from typing import List

def generate_graph(input: List[str]) -> KnowledgeGraph:
    cur_state = KnowledgeGraph()  
    num_iterations = len(input)
    for i, inp in enumerate(input):
        new_updates = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {
                    "role": "system",
                    "content": """You are an iterative knowledge graph builder.
                    You are given the current state of the graph, and you must append the nodes and edges
                    to it Do not procide any duplcates and try to reuse nodes as much as possible.""",
                },
                {
                    "role": "user",
                    "content": f"""Extract any new nodes and edges from the following:
                    # Part {i}/{num_iterations} of the input:

                    {inp}
                    
                    Here is the current state of the graph:
                    {cur_state.model_dump_json(indent=2)}""",
                },  
            ],
            response_model=KnowledgeGraph,
        )  # type: ignore

        # Update the current state
        cur_state = cur_state.update(new_updates)  
        cur_state.draw(prefix=f"iteration_{i}")
    return cur_state

text_chunks = [
    "Jason knows a lot about quantum mechanics. He is a physicist. He is a professor",
    "Professors are smart.",
    "Sarah knows Jason and is a student of his.",
    "Sarah is a student at the University of Toronto. and UofT is in Canada",
]
graph: KnowledgeGraph = generate_graph(text_chunks)
graph.draw(prefix="final")
```




```{python}



    import dspy
    from typing import List

    dspy.configure(lm = dspy.LM("gpt-4.1"))

    class generate_graph_sig(dspy.Signature):
        """You are an iterative knowledge graph builder.
        You are given the current state of the graph, and you must append the nodes and edges
        to it Do not procide any duplcates and try to reuse nodes as much as possible."""
        i = dspy.InputField()
        num_iterations = dspy.InputField()
        inp = dspy.InputField()
        cur_state = dspy.InputField()

        knowledge_graph: KnowledgeGraph = dspy.OutputField()

    knowledge_updater =  dspy.Predict(generate_graph_sig)

    def generate_graph(input: List[str]) -> KnowledgeGraph:
        cur_state = KnowledgeGraph()  
        num_iterations = len(input)
        for i, inp in enumerate(input):
            new_updates = knowledge_updater(
                i = i,
                num_iterations = num_iterations,
                inp = inp,
            cur_state = cur_state.model_dump_json(indent=2)
            ).knowledge_graph
            cur_state = cur_state.update(new_updates)  
            cur_state.draw(prefix=f"iteration_{i}")
        return cur_state

    text_chunks = [
        "Jason knows a lot about quantum mechanics. He is a physicist. He is a professor",
        "Professors are smart.",
        "Sarah knows Jason and is a student of his.",
        "Sarah is a student at the University of Toronto. and UofT is in Canada",
    ]
    graph: KnowledgeGraph = generate_graph(text_chunks)
    graph.draw(prefix="final")




    
```




```{python}
from pydantic import BaseModel, Field
from typing import List, Optional


class Node(BaseModel, frozen=True):
    id: int
    label: str
    color: str


class Edge(BaseModel, frozen=True):
    source: int
    target: int
    label: str
    color: str = "black"


class KnowledgeGraph(BaseModel):
    nodes: Optional[List[Node]] = Field(..., default_factory=list)
    edges: Optional[List[Edge]] = Field(..., default_factory=list)

    def update(self, other: "KnowledgeGraph") -> "KnowledgeGraph":
        """Updates the current graph with the other graph, deduplicating nodes and edges."""
        return KnowledgeGraph(
            nodes=list(set(self.nodes + other.nodes)),
            edges=list(set(self.edges + other.edges)),
        )

    def draw(self, prefix: str = None):
        dot = Digraph(comment="Knowledge Graph")

        for node in self.nodes:  
            dot.node(str(node.id), node.label, color=node.color)

        for edge in self.edges:  
            dot.edge(
                str(edge.source), str(edge.target), label=edge.label, color=edge.color
            )
        dot.render(prefix, format="png", view=True)
```



```{python}


    from functai import _ai, ai
    from typing import List

    @ai(lm = "gpt-4.1")
    def graph_updater(i, num_iterations, inp, cur_state) -> KnowledgeGraph:
        """You are an iterative knowledge graph builder.
        You are given the current state of the graph, and you must append the nodes and edges
        to it Do not procide any duplcates and try to reuse nodes as much as possible."""
        ...

    def generate_graph(input: List[str]) -> KnowledgeGraph:
        cur_state = KnowledgeGraph()  
        num_iterations = len(input)
        for i, inp in enumerate(input):
            new_updates = graph_updater(i, num_iterations, inp, cur_state.model_dump_json(indent=2))
            cur_state = cur_state.update(new_updates)  
            cur_state.draw(prefix=f"iteration_{i}")
        return cur_state

    text_chunks = [
        "Jason knows a lot about quantum mechanics. He is a physicist. He is a professor",
        "Professors are smart.",
        "Sarah knows Jason and is a student of his.",
        "Sarah is a student at the University of Toronto. and UofT is in Canada",
    ]
    graph: KnowledgeGraph = generate_graph(text_chunks)
    graph.draw(prefix="final")




```